name: Deploy forum and make it official!

on:
  workflow_dispatch:
    inputs:
      branch:
        description: "Select the branch to use as source"
        required: true
        default: "main"
  push:
    branches:
      - main
jobs:
  update-database:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - uses: liquibase/liquibase-github-action@v7
        with:
          operation: 'update'
          classpath: 'docker/liquibase/changelog'
          changeLogFile: 'docker/liquibase/changelog/db.changelog.xml'
          username: ${{ secrets.databaseUsername }}
          password: ${{ secrets.databasePassword }}
          url: jdbc:mariadb://${{ secrets.databaseHost }}:3306/${{ secrets.databaseName }}

  update-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # At least for now we handle settings and config manually as it doesn't seem to work well
      # - name: Update mybb_settings
      #   env:
      #     SITE_DOMAIN: ${{ secrets.siteDomain }}
      #   run: |
      #     sed -i 's/\[\x27cookiedomain\x27\] = "localhost";/\[\x27cookiedomain\x27\] = ".localhost";/g' website/inc/settings.php
      #     sed -i 's/\[\x27developermode\x27\] = "1";/\[\x27developermode\x27\] = "0";/g' website/inc/settings.php
      #     sed -i 's/localhost/'"$SITE_DOMAIN"'/g' website/inc/settings.php
      #     sed -i 's/http:/https:/g' website/inc/settings.php
      #     sed -i 's/\[\x27minifycss\x27\] = "0";/\[\x27minifycss\x27\] = "1";/g' website/inc/settings.php


      # - name: Update config.php
      #   env:
      #     DB_NAME: ${{ secrets.databaseName }}
      #     DB_HOST: ${{ secrets.databaseHost }}
      #     DB_USERNAME: ${{ secrets.databaseUsername }}
      #     DB_PASSWORD: ${{ secrets.databasePassword }}
      #   run: |
      #       sed -i 's/crystalforum\_/'"$DB_NAME"'/g' website/inc/config.php
      #       sed -i "s/172.28.1.2/${DB_HOST}/g" website/inc/config.php
      #       sed -i "s/\['username'\] = 'root';/\['username'\] = '$DB_USERNAME';/g" website/inc/config.php
      #       sed -i "s/\['password'\] = 'root';/\['password'\] = '$DB_PASSWORD';/g" website/inc/config.php


      - name: Remove config and settings
        run: |
          rm -f website/inc/config.php
          rm -f website/inc/settings.php

      - name: Create files for upload
        run: |
          mkdir -p ./upload_folder #create folder to upload
          cp ./website/handlezipfiles.php ./upload_folder/handlezipfiles.php #copy handlezipfiles.php to upload folder
          zip -r ./upload_folder/website.zip ./website #zip website folder
          zip -r ./upload_folder/stylesheets.zip ./stylesheets #zip stylesheets folder
          zip -r ./upload_folder/templates.zip ./templates #zip templates folder
          ls -l ./upload_folder

      - name: Install lftp
        run: sudo apt-get install -y lftp

      - name: Upload zipped files to the server
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USERNAME }}
          FTP_PASS: ${{ secrets.FTP_PASSWORD }}
        run: |
          lftp -u $FTP_USER,$FTP_PASS $FTP_HOST <<EOF
          set ssl:verify-certificate no
          mirror -R ./upload_folder
          bye
          EOF

      - name: Unzip website on the server to root folder
        run: |
          curl -X GET "https://${{ secrets.siteDomain }}/handlezipfiles.php?unzip=website.zip&target=current"

      - name: Unzip stylesheets on the server to stylesheets folder
        run: |
          curl -X GET "https://${{ secrets.siteDomain }}/handlezipfiles.php?unzip=stylesheets.zip&target="

      - name: Unzip templates on the server to templates folder
        run: |
          curl -X GET "https://${{ secrets.siteDomain }}/handlezipfiles.php?unzip=templates.zip&target="

  update-stylesheets:
    needs: [update-database, update-files]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Replace stylesheets with cache/themes in JSON files and update mybb_themes table
        env:
          DB_HOST: ${{ secrets.databaseHost }}
          DB_USER: ${{ secrets.databaseUsername }}
          DB_PASSWORD: ${{ secrets.databasePassword }}
          DB_NAME: ${{ secrets.databaseName }}
        run: |
          # Find all _*.json files in stylesheets folder and its subdirectories
          find ./stylesheets -type f -name "_*.json" | while read json_file; do
            # Extract the theme ID from the JSON file path
            theme_id=$(echo "$json_file" | sed -n 's|.*/theme\([0-9]\+\)/.*|\1|p')

            # Replace 'stylesheets' with 'cache/themes' in each JSON file
            sed -i 's|stylesheets|cache/themes|g' "$json_file"

            # Read the contents of the JSON file
            json_content=$(jq -Rs '.' < "$json_file")

            # Update the mybb_themes table with the JSON contents for the appropriate tid
            mysql -h $DB_HOST -u $DB_USER -p$DB_PASSWORD $DB_NAME -e "
              UPDATE mybb_themes
              SET stylesheets = '$json_content'
              WHERE tid = $theme_id;
            "
          done

      - name: Rebuild stylesheets
        run: |
          curl -X GET "https://${{ secrets.siteDomain }}/handlestylesheetsandtemplates.php?rebuild=stylesheets"
       
  update-templates:
    needs: [update-database, update-files]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Rebuild templates
        run: |
          curl -X GET "https://${{ secrets.siteDomain }}/handlestylesheetsandtemplates.php?rebuild=templates&force=true"


  cleanup:
    needs: [update-stylesheets, update-templates]
    runs-on: ubuntu-latest
    steps:
      - name: Install lftp
        run: sudo apt-get install -y lftp

      - name: Remove templates and stylesheets folders
        run: |
          curl -X GET "https://${{ secrets.siteDomain }}/handlestylesheetsandtemplates.php?cleanup=true"

      - name: Remove zip files and PHP cleanup scripts from server
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USERNAME }}
          FTP_PASS: ${{ secrets.FTP_PASSWORD }}
        run: |
          lftp -u $FTP_USER,$FTP_PASS $FTP_HOST <<EOF
          set ssl:verify-certificate no
          rm -f ./website.zip
          rm -f ./stylesheets.zip
          rm -f ./templates.zip
          rm -f ./handlestylesheetsandtemplates.php
          rm -f ./handlezipfiles.php
          bye
          EOF
